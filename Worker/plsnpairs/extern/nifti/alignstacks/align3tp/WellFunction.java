package extern.nifti.alignstacks.align3tp;/** * This class defines an n dimensional function which has m wells. * * @author J. Anthony Parker, MD PhD <J.A.Parker@IEEE.org> * @version 30October2002 */public class WellFunction extends Function {	private int type = 0, n, m;	private double[] d;	private double[][] l;	public WellFunction(int type, double[] wellDepth,								double[][] wellLocation) {		this.type = type;		this.d = wellDepth;		this.l = wellLocation;		m = d.length;		if(m!=l.length)			throw new IllegalArgumentException(								"WellFunction: incompatible lengths");		n = l[0].length;		for(int i=0; i<m; i++)			if(n!=l[i].length)				throw new IllegalArgumentException(								"Some illegal wellLocation lengths");		return;	}	protected double eval(double[] xt) {		if(n!=xt.length)			throw new IllegalArgumentException("Illegal length vector");		double r = Double.MAX_VALUE;	// min well distance		int well = 0;		for(int i=0; i<m; i++) {			double dist = 0.0;	// distance to well			for(int j=0; j<n; j++)				dist += (xt[j]-l[i][j])*(xt[j]-l[i][j]);			dist = Math.sqrt(dist);			if(dist<r) {				r = dist;				well = i;			}		}		switch(type) {			case 0:				return d[well]+r;			case 1:				return d[well]+r*r;			case 2:				return d[well]+Math.log(r);			default:				return 0.0;		}	}	// number of dimensions	protected int length() {return n;}	}	// end of WellFunction