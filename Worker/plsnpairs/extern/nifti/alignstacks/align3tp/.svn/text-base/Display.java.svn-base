package extern.nifti.alignstacks.align3tp;import ij.plugin.frame.*;import ij.*;import ij.gui.*;import ij.process.*;import extern.nifti.alignstacks.align3tp.Handedness;	// force compileimport extern.nifti.alignstacks.align3tp.ImageSet;	// force compileimport extern.nifti.alignstacks.align3tp.Matrix.*;	// imported nested top-level classes/** * This class implements the Display3_TP options; it has an ImageSet * for each stack. * Axes: x: left-to-right, y: top-to-bottom, z: into display. * isv is a vector of ImageSet(s), each of which hold a stack and the *   axial, coronal, and sagital views. * * @author J. Anthony Parker, MD PhD <J.A.Parker@IEEE.org> * @version 9July2002 * * @see	Display3_TP * @see	extern.nifti.alignstacks.align3tp.ImagePlusPlus * @see	extern.nifti.alignstacks.align3tp.Handedness *		Handedness keeps track of the radiological orientation. * @see	extern.nifti.alignstacks.align3tp.Affine * @see	extern.nifti.alignstacks.align3tp.Matrix * @see	extern.nifti.alignstacks.align3tp.Vector *		Note: this class uses both java.util.Vector and extern.nifti.alignstacks.align3tp.Vector. */public class Display extends DoOption {	private final static String aboutMessage =		"Display3_TP provides an orthogonal view stack display.\n" +		"At startup or for the \"New stack\" or \"Additional stack\"\n" +		"options, the currently selected stack is used.\n" +		"Coronal and sagital views are define with respect to the axial\n" +		"view using the usual Radiology standard.\n" +		"A right handed stack goes from inferior to superior.\n" +		"Install with arguement \"LefttHanded\" for a superior to " +		"inferior stack\n" +		"http://www.med.Harvard.edu/JPNM/ij/plugins/Display3TP.html\n"+		"J.A.Parker@IEEE.org\n";	public void showAbout() {		IJ.showMessage("About Display3_TP", aboutMessage);		return;	}	/**	 * Constructor for Display class.	 *	 * @param rightHanded right handed stack goes from inferior to superior.	 * @param myPlugInFrame main PlugInFrame which hold the buttons	 */	public Display(boolean rightHanded, PlugInFrame myPlugInFrame) {		this.rightHanded = rightHanded;		this.myPlugInFrame = myPlugInFrame;	// for end of doCommand		ImageSet.startOver();		return;	}	/**	 * This method sets up the views.  Between options the user may	 *   close windows etc.	 *	 * @return false if no stacks are open	 */	public boolean setup() {		// if no ImageSets defined, try to add current stack		if(isv.size()<=0)			isv.addElement((Object) new ImageSet(rightHanded, this, true));		for(int i=0; i<isv.size(); )			if(((ImageSet) isv.elementAt(i)).setup())				i++;			else				isv.removeElementAt(i);		if(isv.size() > 0)			return true;		else			return false;	}	/**	 * Perform the operation for one user button push.	 *	 * @param index number of button pushed	 */	public void doCommand(int index) throws InterruptedException{		switch (index) {			case 0:				startOver(); break;			case 1:				additionalStack(); break;			case 2:				scaleStacks(); break;			case 3:				showAbout(); break;			case 4:				ImageSet.toggleCrossHairsOn();				updateWindows(ALL_VIEWS);				setup();				break;			case 5:				ImageSet.incrementCrossHairType();				updateWindows(ALL_VIEWS);				setup();				break;			case 6:				ImageSet.toggleCrossHairsColor();				updateWindows(ALL_VIEWS);				setup();				break;			case 7:				greetings(); break;			case 8:				greetings(); break;			case 9:				mirror("x"); break;			case 10:				mirror("y"); break;			case 11:				mirror("z"); break;			case 12:				rotate("axial"); break;			case 13:				rotate("coronal"); break;			case 14:				rotate("sagital"); break;			case 15:				printViewReg(); break;			default:				break;		}		unlock();		myPlugInFrame.toFront();		myPlugInFrame.requestFocus();		return;	}}